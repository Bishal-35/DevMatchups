name: Issue Assignment Manager

on:
  issue_comment:
    types:
      - created

jobs:
  assign-issue:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install @actions/github @actions/core

      - name: Handle /assign command
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node <<EOF
          const { getInput, setFailed } = require('@actions/core');
          const { context, getOctokit } = require('@actions/github');

          const token = process.env.GITHUB_TOKEN;
          const octokit = getOctokit(token);

          async function handleAssignCommand() {
            const { issue, comment, repository } = context.payload;
            const { owner, repo } = context.repo;

            // Check if the comment contains /assign
            const commentBody = comment.body.trim();
            if (commentBody !== '/assign') {
              console.log("Comment does not contain /assign. Skipping.");
              return;
            }

            const commenter = comment.user.login;

            // Fetch all open issues in the repository
            const { data: issues } = await octokit.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              assignee: commenter,
            });

            // Check if the user is already assigned to any open issue
            if (issues.length > 0) {
              console.log(`${commenter} is already assigned to an issue. Skipping.`);
              await octokit.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: `@${commenter}, you are already assigned to an issue. You can only work on one issue at a time.`,
              });
              return;
            }

            // Check if the issue is already assigned to someone
            if (issue.assignees.length > 0) {
              console.log(`Issue #${issue.number} is already assigned to someone else.`);
              await octokit.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: `This issue is already assigned to someone else.`,
              });
              return;
            }

            // Assign the issue to the commenter
            await octokit.rest.issues.addAssignees({
              owner,
              repo,
              issue_number: issue.number,
              assignees: [commenter],
            });

            console.log(`Assigned issue #${issue.number} to @${commenter}.`);
            await octokit.rest.issues.createComment({
              owner,
              repo,
              issue_number: issue.number,
              body: `@${commenter}, the issue has been assigned to you. Happy coding!`,
            });
          }

          handleAssignCommand().catch((error) => {
            console.error(error);
            setFailed(error.message);
          });
          EOF
